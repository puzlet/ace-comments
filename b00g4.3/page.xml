<document>

<code id="resources" lang="coffee" file="resources" show="0" exec="0" out="1">
$pz.resources = -> [
# Handled directly in http.js.
]
</code>

<code id="window" lang="html" file="window" exec="0" show="1" out="1">
<div id="title">
Web Lab
</div>
</code>

<code id="extras" lang="coffee" file="extras" exec="0" show="1" out="1" win="1">
$blab.codeDecoration = false
</code>

<code id="css" lang="css" file="main" exec="0" show="1" out="1" win="1">
#intro {
    width: 900px;
    margin: 0 auto;
}
</code>

<code id="html" lang="html" file="main" exec="0" show="1" out="1" win="1">
<div id="intro">
==$\LaTeX$/MathJax and hyperlinks in Ace editor code comments==
[/ Puzlet] is about scientific computing in the browser.
For scientific computing code, 
it's useful to include math and hyperlinks in code comments, as [/m/b00c4 this example] shows.
(Also, see [/m/b007h, this example] for similar Octave/Python code.)

The CoffeeScript code below shows how to do this.  To see the generated JavaScript (below the CoffeeScript), 
click the "JS" toggle button (top right).

Click in the CoffeeScript editor to edit the math/link source.  Click outside of the editor to see the rendered math/links.

This math/link rendering feature is now standard in Puzlet blabs.
You can also create a hyperlink for any identifier (e.g., variable, function call).
This is particularly useful for links to functions defined in other blabs.

</div>
</code>

<code id="coffee" lang="coffee" file="main" exec="0" show="1" out="1" win="1">
#!vanilla

# MathJax in a comment: $\Psi(t) = \int_0^\infty \theta_n(t) dt$ 

# Link in a comment: <a href="/">puzlet.com</a>

# This Ace editor
editor = $blab.editors.coffeeEditor.editor 

# Render code comments.
# Save to $blab.comments to handle Run button.
render = ->
    nodes = $ ".ace_comment"  # or container find
    $blab.comments = (new CodeNodeComment($(node), linkCb) for node in nodes)
    comment.render() for comment in $blab.comments
    
# Restore code comments to original source.
restore = -> comment.restore() for comment in $blab.comments
restore() if $blab.comments  # Restore if click Run button.

class CodeNodeComment

    constructor: (@node, @linkCallback) ->
    
    render: ->
        @originalText = @node.text()
        @replaceDiv()
        @mathJax()
        @processLinks()
    
    replaceDiv: ->
        pattern = String.fromCharCode(160)
        re = new RegExp(pattern, "g")
        comment = @originalText.replace(re, " ")
        @node.empty()
        content = $ "<div>", css: display: "inline-block"
        content.append comment
        @node.append content
    
    mathJax: ->
        return unless node = @node[0]
        Hub = MathJax.Hub
        Hub.Queue(["PreProcess", Hub, node])
        Hub.Queue(["Process", Hub, node])
    
    processLinks: ->
        links = @node.find "a"
        return unless links.length
        for link in links
            $(link).mousedown (evt) => @linkCallback $(evt.target)
    
    restore: ->
        return unless @originalText
        @node.empty()
        @node.text @originalText

# State variable and callback for link selection
linkSelected = false
linkCb = (target) -> linkSelected = target

# Comment link navigation
mouseUp = ->
    return unless linkSelected
    href = linkSelected.attr "href"
    target = linkSelected.attr "target"
    if target is "_self"
        $(document.body).animate {scrollTop: $(href).offset().top}, 1000
    else
        window.open href, target ? "_blank"
    linkSelected = false
    editor.blur()

$blab.onFocus = -> restore()
$blab.onBlur = -> render()

unless $blab.initialized
    
    onFocus = editor.onFocus
    editor.onFocus = ->
        $blab.onFocus()
        onFocus.call editor
        
    onBlur = editor.onBlur
    editor.onBlur = ->
        $blab.onBlur()
        onBlur.call editor
    $blab.initialized = true
    
    editor.on "mouseup", (aceEvent) -> mouseUp()

# Render code comments when MathJax ready.
render() if MathJax?.Hub
$(document).on "mathjaxPreConfig", ->
    window.MathJax.Hub.Register.StartupHook "MathMenu Ready", -> render()
</code>

<code id="result" lang="coffee" file="result" exec="0" show="1" out="1">

</code>

<code id="js" lang="javascript" file="main" exec="0" show="1" out="1">
// Generated by CoffeeScript 1.4.0
(function() {

  2 + 2;

}).call(this);
</code>

</document>

